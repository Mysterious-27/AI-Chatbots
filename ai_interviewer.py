# -*- coding: utf-8 -*-
"""AI_Interviewer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Mysterious-27/AI-Chatbots/blob/main/AI_Interviewer.ipynb

#**Build a Streamlit application that simulates a job interview using Gemini API.**

## Generate streamlit app code
Create the Python code for the Streamlit app, including the Gemini API integration and the interview logic.
"""

# app.py

import streamlit as st
import google.generativeai as genai
import os

# Configure the Gemini API
# Get your API key from environment variables
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')

if not GOOGLE_API_KEY:
    st.warning("Warning: GOOGLE_API_KEY not found in environment variables.")
    st.warning("Please add your API key to Colab Secrets with the name 'GOOGLE_API_KEY' and restart the runtime.")
else:
    genai.configure(api_key=GOOGLE_API_KEY)


QUESTIONS = [
    {
        "question": "How do you use VLOOKUP to find a value in a table?",
        "expected": "You write =VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])."
    },
    {
        "question": "What is the difference between absolute and relative cell references in Excel?",
        "expected": "Relative references change when copied, absolute references ($A$1) do not."
    },
    {
        "question": "Explain how to create a Pivot Table in Excel.",
        "expected": "Select data ‚Üí Insert ‚Üí PivotTable ‚Üí Choose fields for rows, columns, and values."
    }
]

st.title("üßë‚Äçüíª AI Excel Mock Interviewer")

if "step" not in st.session_state:
    st.session_state.step = 0
    st.session_state.answers = []
    st.session_state.evaluations = []

if GOOGLE_API_KEY:
    if st.session_state.step < len(QUESTIONS):
        q = QUESTIONS[st.session_state.step]
        st.subheader(f"Question {st.session_state.step+1}: {q['question']}")
        user_answer = st.text_area("Your Answer:", key=f"answer_{st.session_state.step}")

        if st.button("Submit Answer"):
            prompt = f'''
            You are an Excel interviewer. Evaluate the candidate's answer.

            Question: {q['question']}
            Expected Answer: {q['expected']}
            Candidate's Answer: {user_answer}

            Give:
            - Score (0-5)
            - Feedback in 2 sentences
            '''
            try:
                # Use Gemini API to generate the evaluation
                model = genai.GenerativeModel('gemini-1.5-flash-latest') # Or other suitable Gemini model
                response = model.generate_content(prompt)
                evaluation = response.text
                st.session_state.evaluations.append(evaluation)
                st.session_state.step += 1
                st.rerun()
            except Exception as e:
                st.error(f"Error during Gemini API call: {e}")


    else:
        st.subheader("‚úÖ Interview Complete!")
        for i, eval in enumerate(st.session_state.evaluations):
            st.write(f"**Q{i+1}:** {QUESTIONS[i]['question']}")
            st.write(eval)
        st.success("This concludes your interview. Thank you!")
else:
    st.warning("Please add your GOOGLE_API_KEY to Colab Secrets and restart the runtime.")

"""## Save the app code to a file
Write the generated Python code to a file named `app.py`.

"""

# Save the Streamlit code to a file
with open('app.py', 'w') as f:
    f.write("""
import streamlit as st
import google.generativeai as genai
import os

# Configure the Gemini API
# Get your API key from environment variables
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')

if not GOOGLE_API_KEY:
    st.warning("Warning: GOOGLE_API_KEY not found in environment variables.")
    st.warning("Please add your API key to Colab Secrets with the name 'GOOGLE_API_KEY' and restart the runtime.")
else:
    genai.configure(api_key=GOOGLE_API_KEY)


QUESTIONS = [
    {
        "question": "How do you use VLOOKUP to find a value in a table?",
        "expected": "You write =VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])."
    },
    {
        "question": "What is the difference between absolute and relative cell references in Excel?",
        "expected": "Relative references change when copied, absolute references ($A$1) do not."
    },
    {
        "question": "Explain how to create a Pivot Table in Excel.",
        "expected": "Select data ‚Üí Insert ‚Üí PivotTable ‚Üí Choose fields for rows, columns, and values."
    }
]

st.title("üßë‚Äçüíª AI Excel Mock Interviewer")

if "step" not in st.session_state:
    st.session_state.step = 0
    st.session_state.answers = []
    st.session_state.evaluations = []

if GOOGLE_API_KEY:
    if st.session_state.step < len(QUESTIONS):
        q = QUESTIONS[st.session_state.step]
        st.subheader(f"Question {st.session_state.step+1}: {q['question']}")
        user_answer = st.text_area("Your Answer:", key=f"answer_{st.session_state.step}")

        if st.button("Submit Answer"):
            prompt = f'''
            You are an Excel interviewer. Evaluate the candidate's answer.

            Question: {q['question']}
            Expected Answer: {q['expected']}
            Candidate's Answer: {user_answer}

            Give:
            - Score (0-5)
            - Feedback in 2 sentences
            '''
            try:
                # Use Gemini API to generate the evaluation
                model = genai.GenerativeModel('gemini-1.5-flash-latest') # Or other suitable Gemini model
                response = model.generate_content(prompt)
                evaluation = response.text
                st.session_state.evaluations.append(evaluation)
                st.session_state.step += 1
                st.rerun()
            except Exception as e:
                st.error(f"Error during Gemini API call: {e}")


    else:
        st.subheader("‚úÖ Interview Complete!")
        for i, eval in enumerate(st.session_state.evaluations):
            st.write(f"**Q{i+1}:** {QUESTIONS[i]['question']}")
            st.write(eval)
        st.success("This concludes your interview. Thank you!")
else:
    st.warning("Please add your GOOGLE_API_KEY to Colab Secrets and restart the runtime.")
"""
)

"""## Install necessary libraries
Install the required libraries `streamlit` and `pyngrok`.

"""

!pip install streamlit pyngrok -q

"""## Run the streamlit app with ngrok
Start the Streamlit app and expose it to the internet using ngrok.

"""

# Run the Streamlit app using ngrok
from pyngrok import ngrok
from google.colab import userdata
import os

# Get the ngrok authtoken from Colab secrets
NGROK_AUTH_TOKEN = userdata.get('NGROK_AUTH_TOKEN')
ngrok.set_auth_token(NGROK_AUTH_TOKEN)

# Get the Google API key from Colab secrets
GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY')

# Set the environment variable for the Streamlit app
os.environ['GOOGLE_API_KEY'] = GOOGLE_API_KEY

public_url = ngrok.connect(8501)
print(f"Streamlit app available at: {public_url}")

!streamlit run app.py